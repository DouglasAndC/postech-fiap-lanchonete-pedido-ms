# Default values for lanchonete-pedido.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: dougandc/lanchonete-pedido
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: LoadBalancer
  port: 8080
  targetPort: 8080
  path: /hello
  initialDelaySeconds: 60
  periodSeconds: 30

ingress:
  enabled: false
  className: "alb"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: secret-password-broker-mq-queue-volume
    secret:
      defaultMode: 420
      secretName: secret-password-broker-mq-queue

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: secret-password-broker-mq-queue-volume
    mountPath: /etc/credentials/secret-password-broker-mq-queue

nodeSelector: {}

tolerations: []

affinity: {}

healthCheck:
  enabled: true
  path: "/lanchonete-pedidos/api/v1/actuator/health"
  port: 8080

env:
  - name: DATABASE_HOST
    value: "lanchonete-pedido-db.cluster-cvwsi6meo8q2.us-east-1.docdb.amazonaws.com"
  - name: CLIENTE_SERVICE
    value: "http://lanchonete-cliente:8080/lanchonete-cliente/api/v1"
  - name: PRODUTO_SERVICE
    value: "http://lanchonete-produto:8080/lanchonete-produto/api/v1"
  - name: CLIENT_MQ_USERNAME
    value: "guest-lanchonete"
  - name: CLIENT_MQ_PASSWORD
    value: "/etc/credentials/secret-password-broker-mq-queue/password"
  - name: CLIENT_MQ_HOST
    value: "b-f3cb747e-0f01-440e-b725-5639b5917326.mq.us-east-1.amazonaws.com"
  - name: CLIENT_MQ_QUEUE_NAME
    value: "pedido-to-client-mq"
  - name: COZINHA_MQ_USERNAME
    value: "guest-lanchonete"
  - name: COZINHA_MQ_PASSWORD
    value: "/etc/credentials/secret-password-broker-mq-queue/password"
  - name: COZINHA_MQ_HOST
    value: "b-f3cb747e-0f01-440e-b725-5639b5917326.mq.us-east-1.amazonaws.com"
  - name: COZINHA_MQ_QUEUE_NAME
    value: "pedido-to-cozinha-mq"
  - name: MQ_PORT
    value: "5671"